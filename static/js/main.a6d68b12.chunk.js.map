{"version":3,"sources":["scripts/actions/index.js","utils/lazyload.js","scripts/views/login/index.js","scripts/views/index.js","scripts/index.js","App.js","serviceWorker.js","scripts/reducers/user.js","scripts/reducers/data.js","scripts/reducers/index.js","store.js","index.js","utils/history.js","utils/axios.js","utils/index.js"],"names":["getUserList","a","url","params","axios","post","type","loadingComponent","size","style","position","left","right","top","bottom","margin","loader","loading","Loadable","num","timer","phoneReg","codeReg","Login","receiveCode","test","phone","state","value","setInterval","setState","txt","loginFlag","clearInterval","then","res","localStorage","username","data","handleSubmit","e","preventDefault","props","form","validateFields","err","values","code","history","push","_id","token","console","log","this","getFieldDecorator","className","color","textAlign","fontSize","marginTop","onSubmit","Item","rules","required","message","pattern","RegExp","prefix","placeholder","ref","el","htmlType","marginLeft","onClick","disabled","React","Component","create","name","Layout","Switch","Route","path","exact","render","Redirect","to","component","LazyLoad","childContextTypes","PropTypes","object","MainRoute","basename","App","Boolean","window","location","hostname","match","defaultState","immutable","fromJS","email","mintor","uid","Map","reducers","combineReducers","user","action","obj","toJS","store","createStore","applyMiddleware","thunk","promise","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","createHashHistory","defaults","baseURL","headers","common","interceptors","request","use","config","msg","warning","error","Promise","reject","response","setTimeout","success"],"mappings":"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","file":"static/js/main.a6d68b12.chunk.js","sourcesContent":["\r\n\r\nimport {axios } from \"&\"\r\n\r\n// \r\n\r\nexport async function getUserList({url,params}){\r\n    const res = await axios.post(url,params);\r\n    return {\r\n        type:\"getUserList\",\r\n    }\r\n}\r\n\r\n// export function countAdd(payload){\r\n    //     return {\r\n    //         type:\"countAdd\",\r\n    //         payload\r\n    //     }\r\n    // }\r\n    \r\n    \r\n    // export const GETBANNERASYNC = \"GETBANNERASYNC\"\r\n    // export async function getBannerAsync({url,params}){\r\n    //     let res = await axios.get(url,{params});\r\n    //     return {\r\n    //         type:GETBANNERASYNC,\r\n    //         payload:res.data.result\r\n    //     }\r\n    // }\r\n    \r\n    \r\n    // export function changeTab(payload){\r\n    //     return {\r\n    //         type:\"changeTab\",\r\n    //         payload\r\n    //     }\r\n    // }\r\n    \r\n    \r\n    // export function changeUserInfo(payload){\r\n    //     return {\r\n    //         type:\"changeUserInfo\",\r\n    //         payload\r\n    //     }\r\n    // }\r\n    \r\n    \r\n    // export async function getGoodTypes({url}){\r\n    //     const res = await axios.get(url);\r\n    //     const payload = res.data.result.map((item)=>{\r\n    //         item.title = item.text;\r\n    //         return item;\r\n    //     })\r\n    //     return {\r\n    //         type:\"getGoodTypes\",\r\n    //         payload\r\n    //     }\r\n    // }\r\n    \r\n    // export async function getGoodList({url}){\r\n    //     const res = await axios.get(url);\r\n    //     return {\r\n    //         type:\"getGoodList\",\r\n    //         payload:res.data.result\r\n    //     }\r\n    // }\r\n    \r\n    // export function reverserGoodList(){\r\n    //     return {\r\n    //         type:\"reverserGoodList\"\r\n    //     }\r\n    // }\r\n    \r\n    \r\n    // export async function getSearchList({url,params}){\r\n    //     const res = await axios.get(url,{params});\r\n    //     return {\r\n    //         type:\"getSearchList\",\r\n    //         payload:res.data.result\r\n    //     }\r\n    // }\r\n    \r\n    // export function reverserSearchList(){\r\n    //     return {\r\n    //         type:\"reverserSearchList\"\r\n    //     }\r\n    // }","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { Spin, Icon } from 'antd';\r\n//通用的过场组件\r\nconst loadingComponent = () => {\r\n    return (\r\n        <div>\r\n             <Spin size=\"large\" style={{position:\"fixed\",left:\"0\",right:\"0\",top:\"48%\",bottom:\"0\",margin:\"auto\"}} />\r\n        </div>\r\n    )\r\n}\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader, loading = loadingComponent) => {\r\n    return Loadable({\r\n        loader,   // 需要懒加载的组件 \r\n        loading\r\n    });\r\n}","/* eslint-disable react/no-direct-mutation-state */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport \"./index.scss\";\r\nimport {axios,history} from \"&\"\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Form, Icon, Input, Button, Checkbox ,message} from 'antd';\r\nexport const num = 60;\r\nlet timer = null;\r\nexport const phoneReg = /^1(3|5|7|8|9)\\d{9}$/;\r\nexport const codeReg = /^\\d{4}$/;\r\nclass Login extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loginFlag: true,\r\n            txt: \"获取验证码\",\r\n            num,\r\n            size: 'small',\r\n        }\r\n\r\n    }\r\n\r\n    //获取验证码\r\n    receiveCode = () => {\r\n        if(phoneReg.test(this.phone.state.value)){\r\n            timer = setInterval(() => {\r\n          \r\n                if (this.state.num > 0) {\r\n                    this.state.num--;\r\n                    this.setState({\r\n                        num: this.state.num,\r\n                        txt: \"还剩 \" + this.state.num + \" S\",\r\n    \r\n                        loginFlag: false\r\n                    })\r\n    \r\n                } else {\r\n                    this.setState({\r\n                        num,\r\n                        txt: \"获取验证码\",\r\n                        loginFlag: true\r\n                    })\r\n                    clearInterval(timer);\r\n                }\r\n            }, 1000);\r\n    \r\n    \r\n            axios.post(\"/react/sendCode\",{\r\n                phone:this.phone.state.value,\r\n            }).then(res=>{\r\n               \r\n                localStorage.username=res.data.username;\r\n            })\r\n        }\r\n       \r\n    }\r\n    //去登陆\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                // console.log('Received values of form: ', values);\r\n                // console.log(values.phone,values.code)\r\n\r\n                axios.post(\"/react/checkCode\",{\r\n                    phone:values.phone,\r\n                    code:values.code\r\n                }).then(res=>{\r\n                    if(!!res.data.type){\r\n                        history.push(\"/home\")\r\n                        \r\n                        localStorage._id=res.data._id;\r\n                        localStorage.token = res.data.token;\r\n                        localStorage.phone = values.phone;\r\n                    }else{\r\n                        localStorage._id=\"\";\r\n                        localStorage.token = \"\";\r\n                        localStorage.phone =\"\";\r\n                    }\r\n                    console.log(res)\r\n                })\r\n                \r\n            }\r\n        });\r\n    };\r\n  \r\n    render() {\r\n        const {\r\n            size,\r\n            txt,\r\n            loginFlag,\r\n        } = this.state\r\n        const { getFieldDecorator } = this.props.form;\r\n       \r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"login_a\">\r\n                    <h2 style={{ color: \"#fff\", textAlign: \"center\", fontSize: \"40px\", marginTop: \"-100px\" }}>成绩管理系统</h2><br />\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <Form.Item>\r\n                            {getFieldDecorator('phone', {\r\n                                rules: [{ required: true, message: '请输入您的手机号!!!' },\r\n                     \r\n\r\n                                { pattern: new RegExp(phoneReg), message: '请输入正确的手机号' }\r\n                            ],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                    placeholder=\"请输入您的手机号\"\r\n                                    ref={el=>this.phone=el}\r\n                                />,\r\n                            )}\r\n                            \r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator('code', {\r\n                                rules: [{ required: true, message: '请输入您的验证码!!!' },\r\n                                { pattern: new RegExp(codeReg), message: '不超过4个字符' }],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                    type=\"text\"\r\n                                    placeholder=\"验证码\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\"  htmlType=\"submit\" style={{marginLeft:\"40%\"}} className=\"login-form-button\">\r\n                                登 陆\r\n                            </Button>\r\n                            <Button onClick={this.receiveCode} disabled={!loginFlag} className=\"getCode\" size={size}>{txt}</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create({ name: 'my_login' })(Login);\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\"\r\nimport LazyLoad from \"&/lazyload\"\r\nimport Login from \"../views/login\"\r\nimport PropTypes from \"prop-types\"\r\nexport class Layout extends Component {\r\n    getChildContext() {\r\n        return {\r\n            history: this.props.history\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={() => (<Redirect to=\"/login\" />)} />\r\n                    <Route path=\"/login\" component={Login} />\r\n                    <Route path=\"/home\" component={LazyLoad(()=>import(\"../views/home\"))}/>>\r\n                    <Route render={() => (<Redirect to=\"/index/home\" />)} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLayout.childContextTypes =  {\r\n    history:PropTypes.object\r\n}","\r\n\r\nimport React, { Component } from 'react';\r\nimport {HashRouter  as Hash, Route} from \"react-router-dom\" ;\r\n\r\nimport {Layout} from \"./views\";    \r\n\r\n\r\nexport default class MainRoute extends Component{\r\n    render(){\r\n        return (\r\n            <Hash \r\n                basename=\"/\"\r\n            >   \r\n                <Route component={Layout}/>\r\n            </Hash>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainRoute from \"@/scripts\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRoute></MainRoute>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nimport immutable from \"immutable\"\r\nconst defaultState = immutable.fromJS({\r\n    token:\"\",\r\n    phone:\"\",\r\n    email:\"\",\r\n    mintor:\"\",\r\n    uid:\"\",\r\n    username:\"\"\r\n})\r\n\r\nexport const user = (state = defaultState ,action)=>{\r\n    switch(action.type){\r\n\r\n\r\n        case \"getUserList\":\r\n        const obj = state.toJS();\r\n        return immutable.fromJS({...obj,...action.user});\r\n        break;\r\n\r\n\r\n        default:\r\n        return state;\r\n        break;\r\n    }\r\n}","import immutable from \"immutable\"\r\nimport { GETBANNERASYNC } from \"../actions\";\r\n\r\nconst defaultState = immutable.Map({\r\n\r\n})\r\n\r\nexport const data = (state = defaultState ,action)=>{\r\n    switch(action.type){\r\n \r\n\r\n        // case GETBANNERASYNC:\r\n        // return state.set(\"banner\",action.payload);\r\n        // break;\r\n\r\n        // case \"changeTab\":\r\n        // return state.set(\"tab\",action.payload);\r\n        // break;\r\n\r\n        // case \"getGoodTypes\":\r\n        // return state.set(\"goodTypes\",action.payload)\r\n        // break;\r\n\r\n        // case \"getGoodList\":\r\n        // return state.set(\"goodList\",action.payload)\r\n        // break;\r\n\r\n        // case \"reverserGoodList\":\r\n        // // console.log(state.toJS().goodList.reverse())\r\n        // // state.get(\"goodList\").reverse()\r\n        // return state.set(\"goodList\",state.toJS().goodList.reverse())\r\n        // break;\r\n\r\n        // case \"getSearchList\":\r\n        // return state.set(\"searchList\",action.payload)\r\n        // break;\r\n\r\n        // case \"reverserSearchList\":\r\n        // return state.set(\"searchList\",state.toJS().searchList.reverse())\r\n        // break;\r\n\r\n        default:\r\n        return state;\r\n        break;\r\n    }\r\n}","\r\n\r\n\r\nimport {combineReducers} from \"redux-immutable\";\r\nimport { user } from \"./user\";\r\nimport { data } from \"./data\";\r\n\r\nexport const reducers = combineReducers({\r\n    user:user,\r\n    data\r\n})","\r\n\r\n\r\n\r\nimport {createStore,applyMiddleware } from 'redux'\r\nimport { reducers } from './scripts/reducers';\r\n\r\nimport thunk from \"redux-thunk\"\r\nimport promise from \"redux-promise\"\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../src/styles/index.scss\"\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\"\n\n\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\nimport {createHashHistory,createBrowserHistory} from \"history\";\r\n\r\nexport const history = new createHashHistory();\r\n\r\n// export {history};","/* eslint-disable import/first */\r\n/* eslint-disable eqeqeq */\r\n\r\nimport axios from \"axios\";\r\nimport {history} from \"&/history\"\r\naxios.defaults.baseURL = \"http://47.94.46.114:1996/\";\r\n\r\n\r\nlet token = \"\";\r\naxios.defaults.headers.common['token'] = token;    // token \r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\nimport {message} from \"antd\"\r\n\r\nconst success = (msg) => {\r\n  message.success(msg);\r\n};\r\n\r\nconst error = (msg) => {\r\n  message.error(msg);\r\n};\r\n\r\nconst warning = (msg) => {\r\n  message.warning(msg);\r\n};\r\n\r\n\r\n// 拦截器配置    Interceptors \r\n// 发送请求之前 添加拦截器  \r\naxios.interceptors.request.use(function (config) {\r\n    // 发送之前做的事情 \r\n    // loadingToast(\"请求中\");\r\n    warning(\"资源加载中\")\r\n    config.headers['token'] =  localStorage.token;\r\n    console.log(config);\r\n\r\n    return config;\r\n}, function (error) {\r\n    // 发送失败 做的失败 \r\n    error(\"请求失败\")\r\n    return Promise.reject(error);\r\n});\r\n\r\n// 响应数据 的拦截器 \r\naxios.interceptors.response.use(function (response) {\r\n    // 成功接收到数据 \r\n    console.log(response);\r\n    setTimeout(()=>{\r\n        if(response.data.code==200){\r\n          success(response.data.msg)\r\n\r\n        }else if(response.data.code==404){\r\n          error(response.data.msg)\r\n        }\r\n    },500)\r\n    return response;\r\n}, function (error) {\r\n  error(\"响应失败\");\r\n    // 无法接收到数据  \r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\nexport  {axios};\r\n\r\n","\r\n\r\n\r\n\r\n// commonJS 规范  ES6 module\r\n// export default\r\n// export const  \r\n\r\n\r\n\r\n\r\nimport url from \"url\";\r\n\r\nexport function getQuery(search){\r\n    return url.parse(search,true).query;\r\n}\r\n\r\n\r\n\r\nexport {axios} from \"./axios\";\r\nexport {history} from \"./history\";"],"sourceRoot":""}